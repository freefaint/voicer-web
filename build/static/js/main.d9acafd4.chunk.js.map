{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","name","setName","img","setImg","showText","setShowText","speech","result","setResult","useEffect","voice","webkitSpeechRecognition","lang","continious","interimResults","onerror","err","console","log","onresult","e","results","Object","keys","filter","i","parseInt","toString","map","transcript","final","isFinal","onend","setTimeout","start","useSpeech","db","setDb","setInterval","a","fetch","then","resp","json","useServicePulse","data","products","prod","find","names","j","k","indexOf","className","style","backgroundImage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PA6FeA,MAhCf,WAAgB,IAAD,EACaC,mBAAiB,IAD9B,mBACLC,EADK,KACCC,EADD,OAEWF,qBAFX,mBAELG,EAFK,KAEAC,EAFA,OAGqBJ,oBAAS,GAH9B,mBAGLK,EAHK,KAGKC,EAHL,KAKPC,EAvDR,WAAsB,IAAD,EACWP,qBADX,mBACXQ,EADW,KACHC,EADG,KA+BnB,OA5BAC,qBAAU,WAER,IAAMC,EAAQ,IAAIC,wBAElBD,EAAME,KAAO,QACbF,EAAMG,YAAa,EACnBH,EAAMI,gBAAiB,EAEvBJ,EAAMK,QAAU,SAACC,GACfC,QAAQC,IAAI,QAASF,IAGvBN,EAAMS,SAAW,SAACC,GAChB,IAAMC,EAAUC,OAAOC,KAAKH,EAAEC,QAAQ,IAAIG,QAAO,SAAAC,GAAC,OAAIC,SAASD,EAAG,IAAIE,aAAeF,KAAGG,KAAI,SAAAH,GAAC,OAAIL,EAAEC,QAAQ,GAAGI,GAAGI,cAEjHrB,EAAU,CAAEa,UAASS,MAAOV,EAAEC,QAAQ,GAAGU,UACzCd,QAAQC,IAAIG,IAGdX,EAAMsB,MAAQ,WACZf,QAAQC,IAAI,OAEZe,YAAW,kBAAMvB,EAAMwB,UAAS,MAGlCxB,EAAMwB,UACL,IAEI3B,EAwBQ4B,GACTC,EAtBR,WAA4B,IAAD,EACHrC,qBADG,mBACjBqC,EADiB,KACbC,EADa,KAazB,OAVA5B,qBAAU,WACR6B,YAAW,sBAAC,sBAAAC,EAAA,2EAERF,EAFQ,SAEIG,MAAM,kBAAkBC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAF9C,kFAIR1B,QAAQC,IAAI,WAJJ,yDAMT,OACF,IAEIkB,EASIQ,GAELC,EAAOC,GAAYV,EAiBzB,OAfA3B,qBAAU,WACRQ,QAAQC,IAAIZ,GACZ,IAAMyC,EAAOF,EAAKG,MAAK,SAAAvB,GAAC,OAAIA,EAAEwB,MAAMD,MAAK,SAAAE,GAAC,cAAI5C,QAAJ,IAAIA,OAAJ,EAAIA,EAAQe,QAAQ2B,MAAK,SAAAG,GAAC,OAAsB,IAAlBA,EAAEC,QAAQF,YAE9EH,IACF9C,EAAQ8C,EAAK/C,MACbG,EAAO4C,EAAK7C,OAGd,OAAII,QAAJ,IAAIA,OAAJ,EAAIA,EAAQe,QAAQ2B,MAAK,SAAAvB,GAAC,OAAqC,IAAjCA,EAAE2B,QAAQ,wFACtC/C,GAAaD,KAGd,CAAEE,EAAQ8B,IAGX,qBAAKiB,UAAU,MAAMC,MAAO,CAAEC,gBAAgB,OAAD,OAASrD,EAAT,MAA7C,SACGE,EAAWJ,EAAO,MC1EVwD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.d9acafd4.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\n\nimport products from './prods.json';\n\ninterface Product {\n  name: string;\n  names: string[];\n  img: string;\n}\n\nfunction useSpeech() {\n  const [ result, setResult ] = useState<{ results: string[], final: boolean }>();\n\n  useEffect(() => {\n    // @ts-ignore\n    const voice = new webkitSpeechRecognition();\n\n    voice.lang = 'ru-RU';\n    voice.continious = true;\n    voice.interimResults = true;\n\n    voice.onerror = (err: any) => {\n      console.log('error', err);\n    }\n\n    voice.onresult = (e: any) => {\n      const results = Object.keys(e.results[0]).filter(i => parseInt(i, 10).toString() === i).map(i => e.results[0][i].transcript);\n      \n      setResult({ results, final: e.results[0].isFinal });\n      console.log(results);\n    }\n\n    voice.onend = () => {\n      console.log('end');\n\n      setTimeout(() => voice.start(), 100);\n    }\n\n    voice.start();\n  }, []);\n\n  return result;\n}\n\nfunction useServicePulse() {\n  const [ db, setDb ] = useState<Product[]>();\n\n  useEffect(() => {\n    setInterval(async () => {\n      try {\n        setDb(await fetch('/products.json').then(resp => resp.json()));\n      } catch (e) {\n        console.log('no data');\n      }\n    }, 10000);\n  }, []);\n\n  return db;\n}\n\nfunction App() {\n  const [ name, setName ] = useState<string>('');\n  const [ img, setImg ] = useState<string>();\n  const [ showText, setShowText ] = useState(true);\n\n  const speech = useSpeech();\n  const db = useServicePulse()\n\n  const data = products || db;\n\n  useEffect(() => {\n    console.log(speech);\n    const prod = data.find(i => i.names.find(j => speech?.results.find(k => k.indexOf(j) !== -1)));\n\n    if (prod) {\n      setName(prod.name);\n      setImg(prod.img);\n    }\n    \n    if (speech?.results.find(i => i.indexOf('показать текст') !== -1)) {\n      setShowText(!showText);\n    }\n\n  }, [ speech, db ])\n\n  return  (\n    <div className=\"App\" style={{ backgroundImage: `url(${img})` }}>\n      {showText ? name : ''}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}